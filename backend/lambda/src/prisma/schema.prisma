generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ApplicationStatus {
  APPLIED
  IN_REVIEW
  ACCEPTED
  REJECTED
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  // 既存の skills フィールドは廃止し、UserSkill 経由で管理する
  // skills        String?
  experience   String?
  salesforceId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  applications Application[]
  favorites    Favorite[]
  userSkills   UserSkill[]
}

model Company {
  id           Int      @id @default(autoincrement())
  name         String
  website      String?
  salesforceId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  contacts         Contact[]
  jobOpportunities JobOpportunity[]
}

model Contact {
  id           Int      @id @default(autoincrement())
  companyId    Int
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  position     String?
  salesforceId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

model JobOpportunity {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  // 既存の skillsRequired フィールドは削除し、JobOpportunitySkill 経由で管理する
  // skillsRequired String?
  location     String?
  compensation String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  applications         Application[]
  favorites            Favorite[]
  jobOpportunitySkills JobOpportunitySkill[]
}

model Application {
  id               Int               @id @default(autoincrement())
  userId           Int
  jobOpportunityId Int
  status           ApplicationStatus @default(APPLIED)
  appliedAt        DateTime          @default(now())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  user           User           @relation(fields: [userId], references: [id])
  jobOpportunity JobOpportunity @relation(fields: [jobOpportunityId], references: [id])
}

model Favorite {
  id               Int      @id @default(autoincrement())
  userId           Int
  jobOpportunityId Int
  createdAt        DateTime @default(now())

  user           User           @relation(fields: [userId], references: [id])
  jobOpportunity JobOpportunity @relation(fields: [jobOpportunityId], references: [id])

  @@unique([userId, jobOpportunityId])
}

model Skill {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userSkills           UserSkill[]
  jobOpportunitySkills JobOpportunitySkill[]
}

// ユーザーとスキルの多対多関係を表す中間テーブル
model UserSkill {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  skill   Skill @relation(fields: [skillId], references: [id])
  skillId Int

  // 必要に応じてスキルレベルなどを追加可能
  level String?

  @@id([userId, skillId])
}

// 求人案件とスキルの多対多関係を表す中間テーブル
model JobOpportunitySkill {
  jobOpportunity   JobOpportunity @relation(fields: [jobOpportunityId], references: [id])
  jobOpportunityId Int
  skill            Skill          @relation(fields: [skillId], references: [id])
  skillId          Int

  // 求人案件で求めるスキルレベルなどの情報を追加可能
  requiredLevel String?

  @@id([jobOpportunityId, skillId])
}
